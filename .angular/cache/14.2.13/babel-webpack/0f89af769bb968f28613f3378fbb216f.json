{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TransactionService = /*#__PURE__*/(() => {\n  class TransactionService {\n    constructor(http) {\n      this.http = http;\n      this.url = '/assets/data/transactions.json';\n    }\n\n    getTransaction() {\n      return this.http.get(this.url).pipe(tap(_ => this.log('fetched transaction')), catchError(this.handleError('getTransaction', [])));\n    }\n\n    getTransactionById(id) {\n      var fileUrl = `/assets/data/${id}.json`;\n      return this.http.get(fileUrl).pipe(tap(_ => this.log(`fetched transaction id : ${id}`)), catchError(this.handleError('getTransaction', [])));\n    }\n    /**\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n    log(message) {\n      console.log(`${message}`);\n    }\n\n  }\n\n  TransactionService.ɵfac = function TransactionService_Factory(t) {\n    return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TransactionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransactionService,\n    factory: TransactionService.ɵfac,\n    providedIn: 'root'\n  });\n  return TransactionService;\n})();","map":null,"metadata":{},"sourceType":"module"}